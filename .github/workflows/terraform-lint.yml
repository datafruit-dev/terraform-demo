name: Terraform Lint and Validation

'on':
  push:
    branches:
      - main
      - develop
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-lint.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-lint.yml'

env:
  TERRAFORM_VERSION: '1.4.0'

jobs:
  terraform-lint:
    name: Terraform Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - name: Terraform Format Check
        id: fmt
        run: |
          echo "Checking Terraform formatting..."
          terraform fmt -check -recursive -diff
        continue-on-error: true
        
      - name: Post Format Check Comment
        if: github.event_name == 'pull_request' && steps.fmt.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Terraform Format Check Failed**\n\nPlease run `terraform fmt -recursive` to fix formatting issues.'
            })
            
      - name: Terraform Init
        id: init
        run: |
          echo "Initializing Terraform..."
          terraform init -backend=false
          
      - name: Terraform Validate
        id: validate
        run: |
          echo "Validating Terraform configuration..."
          terraform validate -no-color
          
      - name: TFLint Setup
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest
          
      - name: Initialize TFLint
        run: |
          echo "Initializing TFLint..."
          tflint --init
          
      - name: Run TFLint
        id: tflint
        run: |
          echo "Running TFLint..."
          tflint --format compact
        continue-on-error: true
        
      - name: Post TFLint Comment
        if: github.event_name == 'pull_request' && steps.tflint.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **TFLint found issues**\n\nPlease review and fix the linting issues identified by TFLint.'
            })
            
      - name: Fail if any checks failed
        if: steps.fmt.outcome == 'failure' || steps.validate.outcome == 'failure' || steps.tflint.outcome == 'failure'
        run: |
          echo "Linting checks failed!"
          if [ "${{ steps.fmt.outcome }}" == "failure" ]; then
            echo "❌ Terraform format check failed"
          fi
          if [ "${{ steps.validate.outcome }}" == "failure" ]; then
            echo "❌ Terraform validation failed"
          fi
          if [ "${{ steps.tflint.outcome }}" == "failure" ]; then
            echo "❌ TFLint check failed"
          fi
          exit 1

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Checkov security scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          quiet: false
          soft_fail: true
          output_format: cli
          download_external_modules: true
          
      - name: Run tfsec security scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: true
          format: default
          
      - name: Post Security Results Comment
        if: github.event_name == 'pull_request' && (steps.checkov.outcome == 'failure' || failure())
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🔒 **Security Scan Results**\n\nSecurity scans have identified potential issues. Please review the workflow logs for details.'
            })

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform Docs
        run: |
          curl -sSLo terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.17.0/terraform-docs-v0.17.0-linux-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/
          
      - name: Check Terraform documentation
        run: |
          echo "Checking if Terraform documentation is up to date..."
          terraform-docs markdown . > /tmp/generated-docs.md
          if [ -f "README.md" ]; then
            echo "README.md exists, checking for terraform-docs section..."
          else
            echo "Note: No README.md file found. Consider adding documentation."
          fi